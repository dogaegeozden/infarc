#!/usr/bin/python3

# LIBRARIES
from sys import argv, exit
from os import path, makedirs
from shutil import copytree, make_archive, ignore_patterns, rmtree, unpack_archive
from pathlib import Path
from logging import basicConfig, DEBUG, debug, disable, CRITICAL

# Doing the basic configuration for the debugging feature
basicConfig(level=DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Comment out the line to enable debugging.
disable(CRITICAL)

# VARIABLES
# List of help options
helpOpts = ["-h", "--help"]
# List of compression options
compOpts = ["-c", "--compress"]
# List of extraction options
extractOpts = ["-e", "--extract"]
# Creating a list of tar options
tarOpts = ["-t", "--tar"]
# Creating a list of zip options
zipOpts = ["-z", "--zip"]
# Creating a list of no hidden options
nHOpts = ["-n", "--no-hidden"]
# Creating a variable to check if all arguments are valid.
argsValid = False
# Creating a list for all valid options
listOfAllValidOpts = helpOpts + compOpts + extractOpts + tarOpts + zipOpts + nHOpts
# Creating the help string
helpTxt = '\033[1m' + "NAME" + '\033[0m' + "\n\t" + 'infarc - Archive folders and files.\n\n' + '\033[1m' + 'USAGE' + '\033[0m'+ "\n\t" + 'infarc [OPTIONS] [SOURCEPATH] [DESTINATIONPATH]' + "\n\n" + '\033[1m' + 'DESCRIPTION' + '\033[0m' + "\n\t" + 'A command line tool to compress and/or extract files or folders.' + "\n\n" + '\033[1m' + 'OPTIONS' + '\033[0m' + "\n\t" + "-c, --compress\n\t\tUse this option to compress files\n\t" + "-e, --extract\n\t\tUse this option to extract files from a compressed folder\n\t" + "-t, --tar\n\t\tUse this option to set the compression type to tar\n\t" + "-z, --zip\n\t\tUse this option to set the compression type to zip\n\t" + "-n, --no-hidden\n\t\tIgnore all the hidden folders\n\n" + '\033[1m' + 'EXAMPLES' + '\033[0m' +"\n\t" + "infarc -c -t <source path> <destination path>\n\t" + "infarc -c -z <source path> <destination path>\n\t" + "infarc -c -z -n <source path> <destination path>\n\t" + "infarc -c -t -n <source path> <destination path>\n\t" + "infarc -e <source path> <destination path>\n\n"

# FUNCTIONS
def main():
    """The function which runs the entire program"""
    # Checking if the argument which is entered after the program's name's itself is a help option.
    if len(argv) == 2 and argv[1].lower().strip() in helpOpts:
        print(helpTxt)

    # Checking if the user is not entering a help option
    else:
        # Checking if the user is entering a compress option.
        if len(argv) >= 4 and len(argv) <= 6 and compOpts[0] in argv and compOpts[1] not in argv or len(argv) >= 4 and len(argv) <= 6 and compOpts[1] in argv and compOpts[0] not in argv:

            # Checking if there any duplicates in the list of arguments. And setting argsValid variable to True if there aren't duplicates in the list of arguments
            if duplicateChecker(argv) == False:

                # Checking if all arguments are valid. Hint: Checking if the first list is a subset of the second list.
                if set(argv[1:-2]).issubset(listOfAllValidOpts) == True:

                    # Creating a destination path from the last argument
                    dP = Path(argv[len(argv)-1])
                    # Creating a source path from the argument which is entered one before the last argument.
                    sP = Path(argv[len(argv)-2])

                    # Making sure that the user is not entering same type of argument twice.
                    if zipOpts[0] in argv and zipOpts[1] in argv or tarOpts[0] in argv and tarOpts[1] in argv or nHOpts[0] in argv and nHOpts[1] in argv:
                        print("You can't enter same type of twice.")
                        exit()

                    # Checking if the user entering a zip option as the compression type.
                    elif zipOpts[0] in argv or zipOpts[1] in argv:
                        # Setting the compression type to zip
                        cT = 'zip'
                    # Checking if the user is entering a tar option as the compression type.
                    elif tarOpts[0] in argv or tarOpts[1] in argv:
                        # Setting the compression type to tar
                        cT = 'tar'
                    # Checking if the user is not entering a zip or tar option as the compression type.
                    elif zipOpts[0] not in argv or zipOpts[1] not in argv or tarOpts[0] not in argv or tarOpts[1] not in argv:
                        # Setting the compression type to zip
                        cT = 'zip'

                    # Checking if no hidden file option is in the list of argumetns
                    if nHOpts[0] in argv or nHOpts[1] in argv:
                        # Setting the no hidden choice to true
                        nHC = True
                    # Checking the no hidden files option is not in the list of arguments
                    else:
                        # Setting the no hidden choice to False.
                        nHC = False

                    # Calling the compress function.
                    compress(sP, dP, cT, nHC)

                # Checking if all arguments are not valid. Hint: Checking if the first list is not subset of the second list.
                else:
                    # Looping through each argument in the list of arguments' specific range
                    for arg in argv[1:-2]:
                        if arg not in listOfAllValidOpts:
                            arg = arg
                            # Printing the
                            print("Invalid argument %s" % arg)
                    print("Type infarc %s to get more information." % helpOpts[0])

            # Checking if there are duplicates
            else:
                # Informing the user that he/she can't enter the same argument twice.
                print("You can't enter the same argument twice. Type infarc %s to get more information." % helpOpts[0])

        # Checking the length of the list of arguments is 4 and the user is entered a extract option
        elif len(argv) == 4 and extractOpts[0] in argv and extractOpts[1] not in argv or len(argv) == 3 and extractOpts[1] in argv and extractOpts[1] not in argv:
            # Creating a destination path from the last argument
            dP = Path(argv[-1])
            # Creating a source path from the the argument which is one before the last argument.
            sP = Path(argv[-2])
            # Calling the extract function.
            extract(sP, dP)

        # Letting the user know what went wrong if the first 2 conditional didn't result with True. And, telling to the user how he/she can get more information.
        else:
            print("Invalid usage. Ex: infarc %s %s <source path> <destination path>. Type infarc %s to get more information" % (compOpts[0],tarOpts[0],helpOpts[0]))



def compress(sP, dP, cT, nHC):
    """A function that compresses files"""
    # Checking if the source path is exists.
    if path.exists(sP) == True:
        # Checking if the destination path is exists.
        if path.exists(dP) == False:
            # Checking if the no hidden file choice is True
            if nHC == True:
                # Creating a directory path
                tDP = Path(f'{dP}_tmp')
                # Copying the entire directory tree from the specific location by skipping the dot files.(Hint: dot file are hidden files)
                copytree(sP, tDP, ignore=ignore_patterns('.*'))
                # Creating an archive from the directory which is just copied.
                make_archive(dP, cT, tDP)
                # Deleting the copied directory.
                rmtree(tDP)
                # Creating a string to inform the user about where he/she can find the archive.
                infoS = f'Compressed folder is available in {dP}'
                # Printing the information string.
                print(infoS)
                # Returning the information string.
                return infoS

            # Checking if the no hidden file option is False.
            else:
                # Creating an archive
                make_archive(dP, cT, sP)
                # Creating a string to inform the user about where he/she can find the archive.
                infoS = f'Compressed folder is available in {dP}'
                # Printing the information string.
                print(infoS)
                # Returning the information string.
                return infoS

        # Checking if the destination path is exists.
        else:
            # Letting the user know that the destination path is already exists.
            print('Destination path is already exists.')

    # Checking if the source path is not exists.
    else:
        # Printing the "Source path is not exists." string.
        print('Source path is not exists.')


def extract(sP, dP):
    """A function that extracts compressed files"""
    # Checking if the source path is exists.
    if path.exists(sP) == True:
        # Checking if the destination  path is not exists.
        if path.exists(dP) == False:
            # Creating a directory in the destination path.
            makedirs(dP)
            # Extracting the source path to destination path
            unpack_archive(sP, dP)
            # Creating an information string to let user know where are the extracted files are.
            infoS = f'Extracted files are available in {dP}'
            # Printing the information string.
            print(infoS)
            # Returning the information string.
            return infoS
        # Checking if the destination path is exists.
        else:
            # Printing "Destionation path is already exists." text.
            print('Destionation path is already exists.')

    # Checking if the source path is not exists.
    else:
        # Printing "Source path isn't exists." text.
        print('Source path isn\'t exists.')

def duplicateChecker(values):
    """A function to identify if there is/are any duplicates"""
    if len(values) != len(set(values)):
        return True
    else:
        return False


# Evaluate if the source is being run on its own or being imported somewhere else. With this conditional in place, your code can not be imported somewhere else.
if __name__ == '__main__':
    main()
